# -*- coding: utf-8 -*-
import os
# Form implementation generated from reading ui file 'interfata.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import sys
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import QImage
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
import cv2 as cv
import json
from ultralytics import YOLO
import numpy as np


class Ui_MainWindow(object):

    def setupUi(self, MainWindow):
        self.main_window = MainWindow

        MainWindow.setObjectName("MainWindow")
        MainWindow.setEnabled(True)
        MainWindow.resize(1041, 672)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        # Filename pentru imagine si copia ei
        self.filename = None
        self.tmp = None

        # Widget-uri
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(40, 460, 661, 21))
        self.line.setFrameShape(QtWidgets.QFrame.HLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")

        '''contrast Slider'''
        self.contrastSlider = QtWidgets.QSlider(self.centralwidget)
        self.contrastSlider.setGeometry(QtCore.QRect(750, 70, 160, 22))
        self.contrastSlider.setOrientation(QtCore.Qt.Horizontal)
        self.contrastSlider.setObjectName("contrastSlider")
        self.contrastSlider.setMinimum(100)
        self.contrastSlider.setMaximum(300)
        self.contrastSlider.setValue(100)

        self.label = QtWidgets.QLabel(self.centralwidget)
        self.label.setGeometry(QtCore.QRect(770, 50, 141, 16))
        self.label.setObjectName("label")

        '''Imagine'''
        self.Imagine = QtWidgets.QLabel(self.centralwidget)
        self.Imagine.setGeometry(QtCore.QRect(20, 10, 681, 441))
        self.Imagine.setObjectName("Imagine")

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1041, 26))
        self.menubar.setObjectName("menubar")

        '''Meniu'''
        self.menuFile = QtWidgets.QMenu(self.menubar)
        self.menuFile.setObjectName("menuFile")
        MainWindow.setMenuBar(self.menubar)

        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        '''Buton'''
        self.DetectButton = QPushButton(self.centralwidget)
        self.DetectButton.setObjectName(u"DetectButton")
        self.DetectButton.setGeometry(QtCore.QRect(810, 520, 111, 31))

        '''Gamma slider'''
        self.GammaSlider = QSlider(self.centralwidget)
        self.GammaSlider.setObjectName(u"GammaSlider")
        self.GammaSlider.setGeometry(QRect(750, 160, 160, 22))
        self.GammaSlider.setOrientation(Qt.Horizontal)
        self.GammaSlider.setMinimum(1)
        self.GammaSlider.setMaximum(10)

        '''Gamma label'''
        self.GammaLabel = QLabel(self.centralwidget)
        self.GammaLabel.setObjectName(u"GammaLabel")
        self.GammaLabel.setGeometry(QRect(810, 140, 55, 16))

        '''Noise Reduction Slider'''
        self.noiseReductionSlider = QSlider(self.centralwidget)
        self.noiseReductionSlider.setObjectName(u"noiseReductionSlider")
        self.noiseReductionSlider.setGeometry(QRect(750, 240, 160, 22))
        self.noiseReductionSlider.setOrientation(Qt.Horizontal)
        self.noiseReductionSlider.setMinimum(1)
        self.noiseReductionSlider.setMaximum(10)
        self.noiseReductionSlider.setValue(1)

        '''Noise Reduction Label'''
        self.noiseReductionLabel = QLabel(self.centralwidget)
        self.noiseReductionLabel.setObjectName(u"noiseReductionLabel")
        self.noiseReductionLabel.setGeometry(QRect(810, 220, 100, 16))

        self.batchButton = QPushButton(self.centralwidget)
        self.batchButton.setObjectName(u"batchButton")
        self.batchButton.setGeometry(QRect(810, 570, 111, 31))

        self.contrastSlider.raise_()
        self.label.raise_()
        self.line.raise_()
        self.Imagine.raise_()
        self.DetectButton.raise_()
        self.GammaSlider.raise_()
        self.GammaLabel.raise_()
        self.noiseReductionSlider.raise_()
        self.noiseReductionLabel.raise_()
        self.batchButton.raise_()

        # Slider pentru ajustarea pragului de detectare
        self.thresholdSlider = QSlider(self.centralwidget)
        self.thresholdSlider.setGeometry(QtCore.QRect(750, 450, 160, 22))
        self.thresholdSlider.setOrientation(Qt.Horizontal)
        self.thresholdSlider.setMinimum(10)
        self.thresholdSlider.setMaximum(100)
        self.thresholdSlider.setValue(50)
        self.thresholdSlider.setObjectName("thresholdSlider")

        self.thresholdLabel = QLabel(self.centralwidget)
        self.thresholdLabel.setGeometry(QtCore.QRect(750, 420, 160, 22))
        self.thresholdLabel.setText("Pragul de detectare")



        MainWindow.setCentralWidget(self.centralwidget)

        # Conectarea butoanelor și slider-ului
        self.DetectButton.clicked.connect(self.detectObjects)


        '''Aici se creeaza actiunile'''

        self.actionNou = QtWidgets.QAction(MainWindow)
        self.actionNou.setObjectName("actionNou")

        self.action_sterge = QtWidgets.QAction(MainWindow)
        self.action_sterge.setObjectName("action_sterge")

        self.actionContrast = QtWidgets.QAction(MainWindow)
        self.actionContrast.setObjectName("actionContrast")

        self.menuFile.addAction(self.actionNou)
        self.menuFile.addAction(self.action_sterge)
        self.menubar.addAction(self.menuFile.menuAction())
        self.contrastSlider.addAction(self.actionContrast)
        self.noiseReductionSlider.valueChanged.connect(self.applyNoiseReduction)


        self.retranslateUi(MainWindow)

        #Aici se conecteaza actiunile la sloturi
        self.actionNou.triggered.connect(self.loadImage)  # Conectează la metoda loadImage
        self.action_sterge.triggered.connect(self.deletePhoto)
        self.DetectButton.clicked.connect(self.detectObjects)
        self.batchButton.clicked.connect(self.batchProcessing)
        self.contrastSlider.valueChanged['int'].connect(self.setContrast)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    '''Sfarsit setupUi'''

    def defaultValues(self):
        self.contrastSlider.setValue(100)
        self.noiseReductionSlider.setValue(1)
    def loadImage(self):

        self.filename = QFileDialog.getOpenFileName(directory="G:/__PI Proiect/pythonProject1/res/images",filter="Image (*.png *.jpg *.jpeg *.bmp)")[0]
        self.defaultValues()
        if self.filename:
            self.image = cv.imread(self.filename)
            if self.image is None:
                QMessageBox.warning(self.main_window, "Eroare",
                                    "Imaginea nu a putut fi încărcată. Verifică dacă fișierul este valid.")
                return

            self.tmp = self.image.copy()
            self.setPhoto(self.image)
        '''Sfarsit loadImage'''
    def displayImage(self, img):
        """Afișează imaginea în QLabel după redimensionare."""
        img = cv.resize(img, (681, 441))
        rgb_image = cv.cvtColor(img, cv.COLOR_BGR2RGB)
        qt_image = QImage(rgb_image.data, rgb_image.shape[1], rgb_image.shape[0], rgb_image.strides[0],
                          QImage.Format_RGB888)
        self.Imagine.setPixmap(QtGui.QPixmap.fromImage(qt_image))

    def detectObjects(self):
        if self.tmp is None:
            QMessageBox.warning(self.main_window, "Eroare", "Încărcați o imagine înainte de a efectua detectarea!")
            return

        try:
            # Încarcă modelul YOLOv8
            model_path = "res/best.pt"  # Calea către model
            model = YOLO(model_path)

            # Încarcă configurația din config.json
            config_path = "res/config.json"
            with open(config_path, 'r') as f:
                config = json.load(f)

            # Aplicați pragul de detectare din slider
            detection_threshold = self.thresholdSlider.value() / 100.0

            # Realizează inferența pe imaginea curentă
            results = model.predict(self.tmp, conf=detection_threshold)

            # Obține etichetele claselor din model
            class_labels = model.names  # Dicționar: {id_clasă: nume_clasă}

            # Extrage informațiile despre detecții
            annotated_frame = results[0].plot()  # Imagine cu detecțiile marcate
            self.displayImage(annotated_frame)


            detected_objects = []
            for r in results[0].boxes:
                class_id = int(r.cls[0])  # ID-ul clasei
                confidence = float(r.conf[0])  # Încrederea
                bbox = r.xywh[0].tolist()
                detected_objects.append((class_id, bbox, confidence))

            return detected_objects
            # Afișează detecțiile
            # detecții = "\n".join([f"{obj[0]}: {obj[1]:.2f}" for obj in detected_objects])
            # QMessageBox.information(self.main_window, "Detecții finalizate", f"Obiectele detectate:\n{detecții}")

        except Exception as e:
            QMessageBox.critical(self.main_window, "Eroare", f"A apărut o eroare în timpul detecției: {str(e)}")
            return []


    def setPhoto(self, image):
        image = cv.resize(image, [681, 441], interpolation=cv.INTER_AREA)
        frame = cv.cvtColor(image, cv.IMREAD_ANYCOLOR)
        image = QImage(frame, frame.shape[1], frame.shape[0], frame.strides[0], QImage.Format_RGB888)
        self.Imagine.setPixmap(QtGui.QPixmap.fromImage(image))

    def batchProcessing(self):
        print("Procesarea batch a început")

        source_dir = "res/images/test/images"
        output_dir = "res/images/test/_labels"
        os.makedirs(output_dir, exist_ok=True)

        image_files = [f for f in os.listdir(source_dir) if f.lower().endswith(('.jpg', '.jpeg', '.png'))]

        detections = []
        for image_file in image_files:

            self.tmp = cv.imread(os.path.join(source_dir, image_file))
            detections = self.detectObjects()

            if self.tmp is None:
                print(f"Eroare la încărcarea imaginii: {image_file}")
                continue

            if not detections:
                print(f"Nicio detecție pentru imaginea {image_file}.")
                continue
            else:
                txt_filename = os.path.join(output_dir, f"{os.path.splitext(image_file)[0]}.txt")
                with open(txt_filename, "w") as txt_file:
                    for class_id, bbox, confidence in detections:
                        txt_file.write(f"{class_id} {bbox[0]:.6f} {bbox[1]:.6f} {bbox[2]:.6f} {bbox[3]:.6f} {confidence:.6f}\n")

        print(f"Procesarea imaginilor din {source_dir} s-a încheiat. Rezultatele sunt în {output_dir}.")
    def deletePhoto(self):
        self.Imagine.setText("Încarcă o imagine pentru a începe.")


    def setContrast(self):
        if self.tmp is None:
            return

        value = self.contrastSlider.value() / 100.0

        newImage = cv.convertScaleAbs(self.tmp, alpha=value, beta=0)

        self.setPhoto(newImage)

    def applyNoiseReduction(self):
        if self.tmp is None:
            return
        intensity = self.noiseReductionSlider.value() * 5
        noiseReducedImage = cv.bilateralFilter(self.tmp, d=9, sigmaColor=intensity, sigmaSpace=intensity)
        self.setPhoto(noiseReducedImage)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "DeepFrame"))
        self.label.setText(_translate("MainWindow", "Îmbunătățire contrast"))
        self.Imagine.setText(_translate("MainWindow", "Încarcă o imagine pentru a începe."))
        self.menuFile.setTitle(_translate("MainWindow", "Fișier"))
        self.actionNou.setText(_translate("MainWindow", "Nou"))
        self.action_sterge.setText(_translate("MainWindow", "Șterge fișierul"))
        self.DetectButton.setText(QCoreApplication.translate("MainWindow", u"Detecție obiecte", None))
        self.GammaLabel.setText(QCoreApplication.translate("MainWindow", u"Gamma", None))
        self.noiseReductionLabel.setText(_translate("MainWindow", "Reducere zgomot"))
        self.batchButton.setText(QCoreApplication.translate("MainWindow", u"Procesare batch", None))


# if __name__ == "__main__":
#     app = QtWidgets.QApplication(sys.argv)
#     MainWindow = QtWidgets.QMainWindow()
#     ui = Ui_MainWindow()
#     ui.setupUi(MainWindow)
#     MainWindow.show()
#     sys.exit(app.exec_())
